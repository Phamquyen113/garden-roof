
#include <GL/glut.h>
#include <cmath>
#ifndef M_PI
#define M_PI 3.14159265358979323846
#endif
///-----------------------CAMERA-----------------------
// Camera variables
float cameraX = 0.0f, cameraY = 1.0f, cameraZ = 5.0f;
float cameraYaw = -90.0f, cameraPitch = 0.0f;
float speed = 0.06f;
float sensitivity = 0.06f;
bool mouseCaptured = true;

// Last mouse positions
int lastMouseX = 400, lastMouseY = 300;
int windowWidth = 800, windowHeight = 600;

//-----------------------MATERIAL HANDLER-----------------------
void setMaterial(int r, int g, int b, float shininess = 32.0f) {
    GLfloat normalizedR = r / 255.0f;
    GLfloat normalizedG = g / 255.0f;
    GLfloat normalizedB = b / 255.0f;

    GLfloat matAmbient[] = { normalizedR, normalizedG, normalizedB, 1.0f };
    GLfloat matDiffuse[] = { normalizedR, normalizedG, normalizedB, 1.0f };
    GLfloat matSpecular[] = { normalizedR, normalizedG, normalizedB, 1.0f };
    GLfloat matShininess[] = { shininess };

    glMaterialfv(GL_FRONT, GL_AMBIENT, matAmbient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, matDiffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, matSpecular);
    glMaterialfv(GL_FRONT, GL_SHININESS, matShininess);
}
// Hàm thiết lập ánh sáng
void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0); // Sử dụng nguồn sáng số 0

    GLfloat lightPos[] = { 1.0f, 1.0f, 2.0f, 1.0f }; // Vị trí nguồn sáng
    GLfloat lightAmbient[] = { 0.2f, 0.2f, 0.2f, 1.0f }; // Ánh sáng môi trường
    GLfloat lightDiffuse[] = { 0.8f, 0.8f, 0.8f, 1.0f }; // Ánh sáng khuếch tán
    GLfloat lightSpecular[] = { 1.0f, 1.0f, 1.0f, 1.0f }; // Ánh sáng phản xạ

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular);

    glShadeModel(GL_SMOOTH);
}

// Hàm cập nhật camera
void updateCamera() {
    float frontX = cosf(cameraYaw * M_PI / 180.0f) * cosf(cameraPitch * M_PI / 180.0f);
    float frontY = sinf(cameraPitch * M_PI / 180.0f);
    float frontZ = sinf(cameraYaw * M_PI / 180.0f) * cosf(cameraPitch * M_PI / 180.0f);

    gluLookAt(cameraX, cameraY, cameraZ,
        cameraX + frontX, cameraY + frontY, cameraZ + frontZ,
        0.0f, 1.0f, 0.0f);
}
//---------------------------------------CÁC HÀM BIẾN ĐỔI------------------------------------------

// Hàm Scale: s(x, y, z)
void s(float x, float y, float z) {
    glScalef(x, y, z);
}

// Hàm Rotate quanh trục X: rx(angle)
void rx(float angle) {
    glRotatef(angle, 1.0f, 0.0f, 0.0f);
}

// Hàm Rotate quanh trục Y: ry(angle)
void ry(float angle) {
    glRotatef(angle, 0.0f, 1.0f, 0.0f);
}

// Hàm Rotate quanh trục Z: rz(angle)
void rz(float angle) {
    glRotatef(angle, 0.0f, 0.0f, 1.0f);
}

// Hàm Translate: t(x, y, z)
void t(float x, float y, float z) {
    glTranslatef(x, y, z);
}

// ---------------------------------------CÁC HÌNH KHỐI----------------------------------------

// Hàm vẽ hình cầu (Sphere)
void drawSphere(float radius, int slices = 20, int stacks = 20) {
    glutSolidSphere(radius, slices, stacks);
}

// Hàm vẽ hình trụ (Cylinder)
void drawCylinder(float baseRadius, float topRadius, float height, int slices = 20, int stacks = 20) {
    GLUquadric* quad = gluNewQuadric();
    gluCylinder(quad, baseRadius, topRadius, height, slices, stacks);
    gluDeleteQuadric(quad);
}

// Hàm vẽ hình trụ với 2 đầu bịt kín
void drawClosedCylinder(float baseRadius, float topRadius, float height, int slices = 20, int stacks = 20) {
    GLUquadric* quad = gluNewQuadric();

    // Vẽ phần thân hình trụ
    gluCylinder(quad, baseRadius, topRadius, height, slices, stacks);

    // Vẽ nắp dưới
    glPushMatrix();
    glRotatef(180, 1.0f, 0.0f, 0.0f); // Lật ngược mặt dưới
    gluDisk(quad, 0.0, baseRadius, slices, 1);
    glPopMatrix();

    // Vẽ nắp trên
    glPushMatrix();
    glTranslatef(0.0f, 0.0f, height); // Di chuyển đến đỉnh hình trụ
    gluDisk(quad, 0.0, topRadius, slices, 1);
    glPopMatrix();

    gluDeleteQuadric(quad);
}


// Hàm vẽ hình nón (Cone)
void drawCone(float baseRadius, float height, int slices = 20, int stacks = 20) {
    glutSolidCone(baseRadius, height, slices, stacks);
}

// Hàm vẽ hình hộp (Cube)
void drawCube(float size) {
    glutSolidCube(size);
}
// Hàm vẽ hình hộp chữ nhật với chiều dài, rộng và cao tùy chỉnh
void drawRectangularBox(float length, float width, float height) {
    glPushMatrix();

    // Vẽ 6 mặt của hình hộp chữ nhật
    glBegin(GL_QUADS);

    // Mặt trước
    glNormal3f(0.0f, 0.0f, 1.0f);
    glVertex3f(-length / 2, -height / 2, width / 2);
    glVertex3f(length / 2, -height / 2, width / 2);
    glVertex3f(length / 2, height / 2, width / 2);
    glVertex3f(-length / 2, height / 2, width / 2);

    // Mặt sau
    glNormal3f(0.0f, 0.0f, -1.0f);
    glVertex3f(-length / 2, -height / 2, -width / 2);
    glVertex3f(length / 2, -height / 2, -width / 2);
    glVertex3f(length / 2, height / 2, -width / 2);
    glVertex3f(-length / 2, height / 2, -width / 2);

    // Mặt trái
    glNormal3f(-1.0f, 0.0f, 0.0f);
    glVertex3f(-length / 2, -height / 2, -width / 2);
    glVertex3f(-length / 2, -height / 2, width / 2);
    glVertex3f(-length / 2, height / 2, width / 2);
    glVertex3f(-length / 2, height / 2, -width / 2);

    // Mặt phải
    glNormal3f(1.0f, 0.0f, 0.0f);
    glVertex3f(length / 2, -height / 2, -width / 2);
    glVertex3f(length / 2, -height / 2, width / 2);
    glVertex3f(length / 2, height / 2, width / 2);
    glVertex3f(length / 2, height / 2, -width / 2);

    // Mặt trên
    glNormal3f(0.0f, 1.0f, 0.0f);
    glVertex3f(-length / 2, height / 2, -width / 2);
    glVertex3f(length / 2, height / 2, -width / 2);
    glVertex3f(length / 2, height / 2, width / 2);
    glVertex3f(-length / 2, height / 2, width / 2);

    // Mặt dưới
    glNormal3f(0.0f, -1.0f, 0.0f);
    glVertex3f(-length / 2, -height / 2, -width / 2);
    glVertex3f(length / 2, -height / 2, -width / 2);
    glVertex3f(length / 2, -height / 2, width / 2);
    glVertex3f(-length / 2, -height / 2, width / 2);

    glEnd();
    glPopMatrix();
}

// Hàm vẽ hình bán cầu (Hemisphere)
void drawHemisphere(float radius, int slices = 20, int stacks = 10) {
    GLUquadric* quad = gluNewQuadric();
    gluPartialDisk(quad, 0, radius, slices, stacks, 0, 180);
    gluDeleteQuadric(quad);
}

// Hàm vẽ hình mặt phẳng (Plane)
void drawPlane(float width, float depth) {
    glBegin(GL_QUADS);
    glNormal3f(0.0f, 1.0f, 0.0f); // Pháp tuyến hướng lên trục Y
    glVertex3f(-width / 2, 0.0f, -depth / 2);
    glVertex3f(width / 2, 0.0f, -depth / 2);
    glVertex3f(width / 2, 0.0f, depth / 2);
    glVertex3f(-width / 2, 0.0f, depth / 2);
    glEnd();
}

// Hàm vẽ hình Torus (vòng xuyến)
void drawTorus(float innerRadius, float outerRadius, int nsides = 20, int rings = 20) {
    glutSolidTorus(innerRadius, outerRadius, nsides, rings);
}

// Hàm vẽ hình đĩa (Disk)
void drawDisk(float innerRadius, float outerRadius, int slices = 20, int loops = 20) {
    GLUquadric* quad = gluNewQuadric();
    gluDisk(quad, innerRadius, outerRadius, slices, loops);
    gluDeleteQuadric(quad);
}


//-----------------------OBJECTS-----------------------

// Hàm vẽ đầu con chim
void drawBirdHead() {
    glPushMatrix();

    // Đầu con chim (hình cầu)
    setMaterial(255, 200, 0); // Màu vàng cho đầu
    drawSphere(0.3f);

    // Mỏ trên (hình nón dẹp hơn)
    glPushMatrix();
    setMaterial(255, 165, 0); // Màu cam cho mỏ
    t(0.0f, -0.02f, 0.25f); // Dịch chuyển mỏ trên ra phía trước
    rx(-15); // Nghiêng mỏ xuống một chút
    s(1.0f, 0.2f, 1.0f); // Làm dẹp mỏ theo chiều dọc
    drawCone(0.1f, 0.2f); // Vẽ mỏ
    glPopMatrix();

    // Mỏ dưới (hình nón dẹp hơn)
    glPushMatrix();
    t(0.0f, -0.04f, 0.22f); // Dịch chuyển mỏ dưới ra phía trước
    rx(25); // Nghiêng mỏ dưới lên một chút
    s(1.0f, 0.1f, 1.0f); // Làm dẹp mỏ dưới theo chiều dọc
    drawCone(0.08f, 0.2f); // Vẽ mỏ dưới
    glPopMatrix();

    // Mắt trái (hình cầu nhỏ)
    glPushMatrix();
    setMaterial(0, 0, 0); // Màu đen cho mắt
    t(-0.15f, 0.1f, 0.22f); // Dịch chuyển mắt lên phía trên bên trái
    drawSphere(0.05f);
    glPopMatrix();

    // Mắt phải (hình cầu nhỏ)
    glPushMatrix();
    t(0.15f, 0.1f, 0.22f); // Dịch chuyển mắt lên phía trên bên phải
    drawSphere(0.05f);
    glPopMatrix();

    glPopMatrix();
}

// Hàm vẽ thân (ellipse)
void drawEllipse(float rx, float ry, float rz) {
    glPushMatrix();
    glScalef(rx, ry, rz); // Tạo hình ellipse bằng cách co giãn hình cầu
    drawSphere(1.0f); // Bán kính cơ sở là 1
    glPopMatrix();
}

// Hàm vẽ chim (không có cánh)
void drawBird() {
    glPushMatrix();
    setMaterial(255, 165, 0); // Màu cam cho thân

    // Vẽ thân (hình ellipse)
    glPushMatrix();
    ry(90);
    t(0, 0, 0); // Vị trí của thân
    drawEllipse(0.4f, 0.3f, 0.3f); // Hình ellipse làm thân
    glPopMatrix();

    // Vẽ đầu con chim
 glPushMatrix();
    s(0.6f, 0.6f, 0.6f);
 t(0.0f, 0.6f, 0.5); // Dịch chuyển vị trí của đầu chim ra xa camera
 drawBirdHead();
 glPopMatrix();

    // Vẽ đuôi
    glPushMatrix();
    setMaterial(139, 69, 19); // Màu nâu cho đuôi
    t(0,0.4,-0.25);
    ry(180);
    t(0, -0.4, 0); // Dịch đuôi ra cuối thân
    for (int i = 0; i < 5; i++) {
        glPushMatrix();
        float angle = -30 + i * 15; // Góc xoay giữa các tia đuôi
        ry(angle); // Xoay theo trục Y
        s(1.0f, 0.5f, 1.0f);
        drawCone(0.1f, 0.5f); // Hình nón làm tia đuôi
        glPopMatrix();
    }
    glPopMatrix();

    glPopMatrix();
}

// Hàm vẽ bàn chân
void drawFoot() {
    glPushMatrix();

    // Đế bàn chân (hình cầu)
    setMaterial(200, 100, 50); // Màu nâu
    t(0.0f, -0.9f, 0.0f);

    glPushMatrix();
    t(0.0f, -0.1f, 0.0f);
    drawSphere(0.08f); // Bán kính hình cầu
    glPopMatrix();

    // Ngón chân thứ nhất
    glPushMatrix();
    t(0, -0.1f, 0.0f); // Dịch chuyển ngón chân ra phía trước bên phải
    ry(120); // Xoay ngón chân để tạo góc 120 độ
    rx(15); // Điều chỉnh góc nghiêng
    setMaterial(200, 100, 50); // Màu giống đế
    s(1,0.5,1);
    drawCone(0.05f, 0.3f);
    glPopMatrix();

    // Ngón chân thứ hai
    glPushMatrix();
    t(0, -0.1f, 0.0f); // Dịch chuyển ngón chân ra phía trước bên trái
    ry(-120); // Xoay ngón chân để tạo góc 120 độ
    rx(15); // Điều chỉnh góc nghiêng
    setMaterial(200, 100, 50); // Màu giống đế
    s(1,0.5,1);
    drawCone(0.05f, 0.3f); 
    glPopMatrix();

    // Ngón chân thứ ba
    glPushMatrix();
    t(0.0f, -0.1f, 0); // Dịch chuyển ngón chân ra phía sau
    ry(0); // Không cần xoay
    rx(15); // Điều chỉnh góc nghiêng
    setMaterial(200, 100, 50); // Màu giống đế
    s(1,0.5,1);
    drawCone(0.05f, 0.3f); 
    glPopMatrix();

    glPopMatrix();
}
// Hàm vẽ một chân chim
void drawBirdLeg() {
    // Đùi

    glPushMatrix();
    rx(70);
    t(0, 1, 0);
    glPushMatrix();
    setMaterial(139, 69, 19); // Màu nâu
    t(0.0f, 0.29f, 0.06f);      // Đặt vị trí đùi
    rx(30.0f);                // Xoay đùi hướng ra trước
    drawClosedCylinder(0.08f, 0.07f, 0.4f);
    glPopMatrix();

    // Cẳng chân
    glPushMatrix();
    setMaterial(205, 133, 63); // Màu nâu sáng
    t(0.0f, 0.1f, 0.35f);      // Dịch xuống dưới đùi (theo vị trí đã xoay)
    rx(-30.0f);                // Xoay cẳng chân hướng xuống
    drawClosedCylinder(0.06f, 0.05f, 0.4f);
    glPopMatrix();
    glPopMatrix();

    glPushMatrix();
    t(0.0f, 0.8f, 1.5f);
    drawFoot();
    glPopMatrix();

    
}

// Hàm vẽ toàn bộ 2 chân chim
void drawBirdLegs() {
    // Chân trái
    glPushMatrix();
    t(-0.2f, -1.0f, 0.0f); // Đặt vị trí chân trái
    drawBirdLeg();
    glPopMatrix();

    // Chân phải
    glPushMatrix();
    t(0.2f, -1.0f, 0.0f); // Đặt vị trí chân phải
    drawBirdLeg();
    glPopMatrix();
}


//-----------------------OUTPUT-----------------------
void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    updateCamera();



 

   
    //glPushMatrix();
    //t(0.0, 0.0, -3.0); // Dịch chim ra xa một chút
    //drawBird();
    //glPopMatrix();

 // Vẽ chân chim
    glPushMatrix();
    t(0.0f, 2.0f, 0.0f); // Đặt vị trí toàn bộ chân chim
    drawBirdLegs();
    glPopMatrix();


    glutSwapBuffers();
}
///-----------------------INPUT-----------------------

// Hàm xử lý chuyển động của camera
void processInput(unsigned char key, int x, int y) {
    float cameraSpeed = speed;
    float frontX = cosf(cameraYaw * M_PI / 180.0f);
    float frontZ = sinf(cameraYaw * M_PI / 180.0f);

    if (key == 'w') {
        cameraX += frontX * cameraSpeed;
        cameraZ += frontZ * cameraSpeed;
    }
    if (key == 's') {
        cameraX -= frontX * cameraSpeed;
        cameraZ -= frontZ * cameraSpeed;
    }
    if (key == 'd') {
        cameraX -= frontZ * cameraSpeed;
        cameraZ += frontX * cameraSpeed;
    }
    if (key == 'a') {
        cameraX += frontZ * cameraSpeed;
        cameraZ -= frontX * cameraSpeed;
    }
    if (key == 'q') { // Di chuyển lên
        cameraY += cameraSpeed;
    }
    if (key == 'e') { // Di chuyển xuống
        cameraY -= cameraSpeed;
    }

    if (key == 'p') { // Tăng độ nhạy chuột
        sensitivity += 0.01f;
        if (sensitivity > 1.0f) sensitivity = 1.0f; // Giới hạn độ nhạy tối đa
    }
    if (key == 'P') { // Giảm độ nhạy chuột
        sensitivity -= 0.01f;
        if (sensitivity < 0.01f) sensitivity = 0.01f; // Giới hạn độ nhạy tối thiểu
    }

    if (key == 27) { // ESC key
        mouseCaptured = !mouseCaptured;
        if (mouseCaptured) {
            glutSetCursor(GLUT_CURSOR_NONE);
            glutWarpPointer(lastMouseX, lastMouseY);
        }
        else {
            glutSetCursor(GLUT_CURSOR_INHERIT);
        }
    }
}

// Hàm xử lý chuột để xoay camera
void mouseMove(int x, int y) {
    if (mouseCaptured) {
        int dx = x - windowWidth / 2;
        int dy = windowHeight / 2 - y;
        glutWarpPointer(windowWidth / 2, windowHeight / 2); // Cố định chuột ở giữa màn hình

        cameraYaw += dx * sensitivity;
        cameraPitch += dy * sensitivity;

        if (cameraPitch > 89.0f) cameraPitch = 89.0f;
        if (cameraPitch < -89.0f) cameraPitch = -89.0f;
    }
}

//-----------------------INIT-----------------------
// Khởi tạo OpenGL
void initOpenGL() {
    glEnable(GL_DEPTH_TEST);
    glClearColor(0.3f, 0.6f, 0.9f, 1.0f);
    setupLighting();
}

// Thiết lập khung nhìn
void reshape(int w, int h) {
    if (h == 0) h = 1; // Tránh chia cho 0
    float aspect = static_cast<float>(w) / static_cast<float>(h); // Tỷ lệ khung hình

    windowWidth = w;
    windowHeight = h;

    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(60.0, aspect, 0.1, 100.0); // FOV 60 độ, phù hợp cho FPS
    glMatrixMode(GL_MODELVIEW);
}
// Hàm tự động làm mới khung hình
void timer(int value) {
    glutPostRedisplay();
    glutTimerFunc(16, timer, 0);
}
// Main
int main(int argc, char** argv) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(windowWidth, windowHeight);
    glutCreateWindow("Valorant Style FPS Camera");

    initOpenGL();
    glutDisplayFunc(display);


    glutReshapeFunc(reshape);
    glutKeyboardFunc(processInput);
    glutPassiveMotionFunc(mouseMove);

    glutSetCursor(GLUT_CURSOR_NONE); // Ẩn con trỏ chuột
    glutWarpPointer(windowWidth / 2, windowHeight / 2);
    glutTimerFunc(16, timer, 0);
    glutMainLoop();
    return 0;
}